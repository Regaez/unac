/* 
LAYOUT: Grid
@name layout-grid
@description Wherever content needs to be deliberately obscured, the Imposter pattern is your friend. It may be that the content is yet to be made available. In which case, the Imposter may consist of a call-to-action to unlock that content.
@link https://every-layout.dev/layouts/grid/

--- CSS VARIABLES ---
 
@var --grid-spacing
@default 1rem
@description The minimum spacing between and around the grid elements; should use `rem` unit. Can be specified on subgrid items to apply different spacing within the subgrid to the main grid.

@var --grid-size
@default calc(60ch - var(--grid-spacing))
@description The minimum amount of space required for each grid item before the grid automatically reduces, or increases, the number of items displayed per row; should use `rem` or `ch` unit. By default, takes grid gap into account.

@var --grid-subgrid-row-span
@default 4
@description The amount of rows each subgrid item should span.

--- PROPS ---

@prop data-is-subgrid
@description If attribute exists on a direct child of the grid, it applies a subgrid to that child. This is useful, for example, to create a grid of cards with the card's children in vertical alignment.

--- USAGE ---

@example Default.

<layout-grid>
  <div><!-- item --></div>
  <div><!-- item --></div>
  <div><!-- item --></div>
</layout-grid> 

@example Override CSS variable values with style attribute.

<layout-grid style="--grid-spacing: 2rem;">
  <div><!-- item --></div>
  <div><!-- item --></div>
  <div><!-- item --></div>
</layout-grid>

@example Create a subgrid of "cards"

<layout-grid style="--grid-spacing: 2rem; --grid-subgrid-row-span: 3;">
  <div data-is-subgrid style="--grid-spacing: 1rem;">
    <img />
    <p><!-- title --></p>
    <p><!-- description--></p>
  </div>
  <div data-is-subgrid style="--grid-spacing: 1rem;">
    <img />
    <p><!-- title --></p>
    <p><!-- description--></p>
  </div>
</layout-grid>

*/
layout-grid {
  --grid-spacing: 1rem;
  --grid-row-count: 3;
  --grid-subgrid-row-span: 4;
  --grid-item-size: calc(
    (var(--measure, 60ch) / var(--grid-row-count)) -
      (var(--grid-row-count) - 1) * var(--grid-spacing)
  );
  display: grid;
  grid-gap: var(--grid-spacing);
  grid-template-columns: repeat(
    auto-fill,
    minmax(min(var(--grid-item-size), 100%), 1fr)
  );
}

layout-grid > [data-is-subgrid] {
  display: grid;
  grid-template-rows: subgrid;
  grid-template-columns: inherit;
  grid-row: span var(--grid-subgrid-row-span);
  grid-gap: var(--grid-spacing);
}
