
/* 
LAYOUT: Switcher
@name layout-switcher
@description A container that can automatically switch between horizontal and vertical layout, based on available container space. It is especially useful where each element should be considered equal, or part of a continuum. Card components advertising products should share the same width no matter the orientation, otherwise one or more cards could be perceived as highlighted or featured in some way.
@link https://every-layout.dev/layouts/switcher/

--- CSS VARIABLES ---
 
@var --switcher-threshold
@default 30rem
@description The container width at which the component switches between a horizontal and vertical layout; should use `rem` or `ch` unit.

@var --switcher-spacing
@default 1rem
@description The space (margin) between the (child) elements; should use `rem` unit.

--- PROPS ---

@prop limit
@default 3
@values 2 | 3 | 4 | 5
@description The maximum number of elements allowed to appear in the horizontal configuration. If not attribute is set, defaults to 3. If the limit is exceeded, all children will be displayed vertically instead of horizontally.

--- USAGE ---

@example Default. Items have 1rem spacing and are aligned horizontally at the start of the container, vertically centered.

<layout-switcher>
 <div><!-- item --></div>
 <div><!-- item --></div>
 <div><!-- item --></div>
</layout-switcher>
 
@example Override CSS variable values with style attribute

<layout-switcher style="--switcher-threshold: 20ch;">
 <div><!-- item --></div>
 <div><!-- item --></div>
 <div><!-- item --></div>
</layout-switcher>
 
@example Layout will be forced to vertical because the limit of children has been exceeded.

<layout-switcher data-limit="2">
 <div><!-- item --></div>
 <div><!-- item --></div>
 <div><!-- item --></div>
</layout-switcher>

*/
layout-switcher {
  --switcher-spacing: 1rem;
  --switcher-threshold: 30rem;
  display: flex;
  flex-wrap: wrap;
  gap: var(--switcher-spacing);
}

layout-switcher > * {
  flex-grow: 1;
  flex-basis: calc((var(--switcher-threshold) - 100%) * 999);
}

layout-switcher[limit="2"] > :nth-last-child(n + 3),
layout-switcher[limit="2"] > :nth-last-child(n + 3) ~ *,
layout-switcher[limit="4"] > :nth-last-child(n + 5),
layout-switcher[limit="4"] > :nth-last-child(n + 5) ~ *,
layout-switcher[limit="5"] > :nth-last-child(n + 6),
layout-switcher[limit="5"] > :nth-last-child(n + 6) ~ * {
  flex-basis: 100%;
}
